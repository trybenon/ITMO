package client.fx.locales;

import java.util.HashMap;

public class EnglishIndia {
    public static HashMap<String, String> getMap() {
        HashMap<String, String> language = new HashMap<>();

        language.put("Welcome", "Welcome");
        language.put("Authorization", "Authorisation");
        language.put("Registration", "Registration");
        language.put("App", "Person Manager");
        language.put("Login", "Login ID");
        language.put("Password", "Password");
        language.put("Enter", "Log In");
        language.put("RepeatPasswod", "Repeat Password");
        language.put("Create", "Create");
        language.put("SingInError", "Error while logging into account");
        language.put("Error", "Error");
        language.put("RegistrationError", "Registration error. Please try again");
        language.put("NoSuchUser", "Please check the entered details.");
        language.put("Empty", "Fields cannot be empty");
        language.put("notEquals", "Passwords do not match");
        language.put("Name", "Name");
        language.put("xCoordinate", "X Coordinate");
        language.put("yCoordinate", "Y Coordinate");
        language.put("Height", "Height");
        language.put("Weight", "Weight");
        language.put("PassportID", "Passport Number");
        language.put("EyeColor", "Eye Colour");
        language.put("LocationX", "X Coordinate");
        language.put("LocationY", "Y Coordinate");
        language.put("LocationZ", "Z Coordinate");
        language.put("AddPerson", "Add Person");
        language.put("UpdatePerson", "Update Person");
        language.put("Confirm", "Confirm");
        language.put("Date", "Date");
        language.put("Red", "Red");
        language.put("Black", "Black");
        language.put("Blue", "Blue");
        language.put("Orange", "Orange");
        language.put("Brown", "Brown");
        language.put("RED", "Red");
        language.put("BLACK", "Black");
        language.put("BLUE", "Blue");
        language.put("ORANGE", "Orange");
        language.put("BROWN", "Brown");
        language.put("None", "N/A");
        language.put("NameError", "cannot be empty");
        language.put("XError", "- invalid format");
        language.put("XErrorMax59", "- cannot be greater than 59");
        language.put("YError", "- invalid format");
        language.put("YErrorMax426", "- cannot be greater than 426");
        language.put("HeightError", "- invalid format");
        language.put("HeightErrorPositive", "- must be greater than 0");
        language.put("WeightError", "- invalid format");
        language.put("WeightErrorPositive", "- must be greater than 0");
        language.put("PassportIDError", "- already exists");
        language.put("EyeColorError", "- invalid format");
        language.put("LocationXError", "- invalid format");
        language.put("LocationYError", "- invalid format");
        language.put("LocationZError", "- invalid format");
        language.put("Success", "Success");
        language.put("SuccessReg", "You have successfully created an account: ");
        language.put("UnableToReg", "A user with this login ID already exists: ");
        language.put("NoConnection", "Connection to server lost");
        language.put("Reconnect", "Reconnect");
        language.put("ConnectionErrorWait", "Reconnecting...");
        language.put("Reconnected", "Connection restored");
        language.put("Reconnection", "Reconnection");
        language.put("PersonAdded", "Person added successfully.");
        language.put("PersonDataUpdated", "Person data updated.");
        language.put("NoSuchPerson", "This person does not belong to you or is not in the collection");
        language.put("Deleted", "Person deleted successfully");
        language.put("AllDelited", "All persons less than the given one have been deleted");
        language.put("NoLower", "No persons less than the given one in the collection or they do not belong to you");
        language.put("SuccessClear", "Collection cleared successfully");
        language.put("NoOneToClear", "No persons to delete");
        language.put("EnterNamePart", "Enter a part of the name for search");
        language.put("UpdateById", "Update");
        language.put("EnterUpdId", "Update by ID");
        language.put("EnterDelId", "Delete by ID");
        language.put("EnterId", "Enter Person ID");
        language.put("Update", "Update Person by ID");
        language.put("helpHelp", "- Help : display help for available commands");
        language.put("infoHelp", "- Info : display information about the collection");
        language.put("addHelp", "- Add : add a new element to the collection");
        language.put("updateHelp", "- Update : update the value of an element whose ID is specified");
        language.put("removeByIdHelp", "- Delete by ID : delete an element from the collection by its ID");
        language.put("clearHelp", "- Clear : clear the collection");
        language.put("execute_scriptHelp", "- Execute Script : read and execute a script from the specified file.");
        language.put("exitHelp", "- Exit : terminate the programme");
        language.put("headHelp", "- Top Person : display the first element of the collection");
        language.put("addIfMaxHelp", "- Add if Maximum: Adds an element if its height exceeds all values in the collection");
        language.put("averageOfHeightHelp", "- Average Height: displays the average height");
        language.put("printAscendingHelp", "- Height in Ascending Order: displays height values in ascending order");
        language.put("HelpBtn", "Help");
        language.put("ExitBtn", "Exit");
        language.put("HeadBtn", "Top Person");
        language.put("InfoBtn", "Info");
        language.put("AddBtn", "Add");
        language.put("UpdateBtn", "Update");
        language.put("ExecuteScriptBtn", "Execute Script");
        language.put("RemoveByIdBtn", "Delete by ID");
        language.put("Clear", "Clear");
        language.put("AddIfMaxBtn", "Add if Maximum");
        language.put("scriptError", "The script link is invalid.");
        language.put("executeScript", "Execute Script");
        language.put("executeScriptToDo", "Enter the script link");
        language.put("Unfilter", "Reset Filter");
        language.put("DO", "Do");
        language.put("Id", "ID");
        language.put("Info", "Information");
        language.put("InfoReturn", "");
        language.put("OK", "OK");
        language.put("TimeoutError", "- timeout exceeded");
        language.put("UserLogin", "Owner");
        language.put("idError", "- ID must be a positive integer");
        language.put("nameError", "Name cannot be empty");
        language.put("DBerror", "Database error");
        language.put("SuccessRegister", "Registration successful");
        language.put("UserExists", "A user with this login ID already exists");
        language.put("AverageOfHeight", "Average Height");
        language.put("AverageOfHeightBtn", "Average Height");
        language.put("PrintAscendingBtn", "Height in Ascending Order");
        language.put("SuccessAdd", "Element added successfully");
        language.put("NotMaximal", "Height is not maximum");

        return language;
    }
}